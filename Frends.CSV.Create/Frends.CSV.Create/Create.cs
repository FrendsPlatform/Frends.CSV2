using CsvHelper;
using CsvHelper.Configuration;
using Frends.CSV.Create.Definitions;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Loader;
using System.Threading;

namespace Frends.CSV.Create;

/// <summary>
/// CSV Task.
/// </summary>
public class CSV
{
    /// Mem cleanup.
    static CSV()
    {
        var currentAssembly = Assembly.GetExecutingAssembly();
        var currentContext = AssemblyLoadContext.GetLoadContext(currentAssembly);
        if (currentContext != null)
            currentContext.Unloading += OnPluginUnloadingRequested;
    }

    /// <summary>
    /// Create a CSV string from object or from a JSON string.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.CSV.Create)
    /// </summary>
    /// <param name="input">Input parameters</param>
    /// <param name="options">Optional parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, string CSV }</returns>
    public static Result Create([PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        var config = new CsvConfiguration(new CultureInfo(options.CultureInfo))
        {
            Delimiter = input.Delimiter,
            HasHeaderRecord = options.IncludeHeaderRow
        };

        if (options.NeverAddQuotesAroundValues)
        {
            config.Mode = CsvMode.NoEscape;
            // if IgnoreQuotes is true, seems like ShouldQuote function has to return false in all cases
            // if IgnoreQuotes is false ShouldQuote can't have any implementation otherwise it will overwrite IgnoreQuotes statement ( might turn it on again)
            config.ShouldQuote = (field) => (!options.NeverAddQuotesAroundValues);
        }
        var csv = string.Empty;

        switch (input.InputType)
        {
            case CreateInputType.List:
                csv = ListToCsvString(input.Data, input.Headers, config, options, cancellationToken);
                break;
            case CreateInputType.Json:
                csv = JsonToCsvString(input.Json, config, options, cancellationToken);
                break;
        }
        return new Result(true, csv);
    }

    private static string ListToCsvString(List<List<object>> inputData, List<string> inputHeaders, CsvConfiguration config, Options options, CancellationToken cancellationToken)
    {
        using var csvString = new StringWriter();
        using var csv = new CsvWriter(csvString, config);

        //Write the header row
        if (config.HasHeaderRecord && inputData.Any())
        {
            foreach (var column in inputHeaders)
            {
                cancellationToken.ThrowIfCancellationRequested();
                csv.WriteField(column);
            }

            csv.NextRecord();
        }

        foreach (var row in inputData)
        {
            cancellationToken.ThrowIfCancellationRequested();

            foreach (var cell in row)
                csv.WriteField(cell ?? options.ReplaceNullsWith);

            csv.NextRecord();
        }

        return csvString.ToString();
    }


    private static string JsonToCsvString(string json, CsvConfiguration config, Options options, CancellationToken cancellationToken)
    {
        List<Dictionary<string, string>> data = JsonConvert.DeserializeObject<List<Dictionary<string, string>>>(json);

        using var csvString = new StringWriter();
        using var csv = new CsvWriter(csvString, config);

        //Write the header row
        if (config.HasHeaderRecord && data.Any())
        {
            foreach (var column in data.First().Keys)
            {
                cancellationToken.ThrowIfCancellationRequested();
                csv.WriteField(column);
            }

            csv.NextRecord();
        }

        foreach (var row in data)
        {
            cancellationToken.ThrowIfCancellationRequested();

            foreach (var cell in row)
                csv.WriteField(cell.Value ?? options.ReplaceNullsWith);

            csv.NextRecord();
        }
        return csvString.ToString();
    }

    private static void OnPluginUnloadingRequested(AssemblyLoadContext obj)
    {
        obj.Unloading -= OnPluginUnloadingRequested;
    }
}